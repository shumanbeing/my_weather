[{"/Users/SHU/dev/my_weather/src/components/Footer.tsx":"1","/Users/SHU/dev/my_weather/src/components/Header.tsx":"2","/Users/SHU/dev/my_weather/src/App.tsx":"3","/Users/SHU/dev/my_weather/src/serviceWorker.ts":"4","/Users/SHU/dev/my_weather/src/components/Main.tsx":"5","/Users/SHU/dev/my_weather/src/index.tsx":"6","/Users/SHU/dev/my_weather/src/features/counter/counterSlice.ts":"7","/Users/SHU/dev/my_weather/src/components/main.components/WeatherCard.tsx":"8","/Users/SHU/dev/my_weather/src/components/main.components/AddCard.tsx":"9","/Users/SHU/dev/my_weather/src/components/SideMenu.tsx":"10"},{"size":213,"mtime":1608874514187,"results":"11","hashOfConfig":"12"},{"size":2966,"mtime":1608975562009,"results":"13","hashOfConfig":"12"},{"size":667,"mtime":1609306286265,"results":"14","hashOfConfig":"12"},{"size":5424,"mtime":1608343249653,"results":"15","hashOfConfig":"12"},{"size":448,"mtime":1609204547129,"results":"16","hashOfConfig":"12"},{"size":648,"mtime":1608343249652,"results":"17","hashOfConfig":"12"},{"size":1851,"mtime":1608343249652,"results":"18","hashOfConfig":"12"},{"size":3435,"mtime":1609221157066,"results":"19","hashOfConfig":"12"},{"size":475,"mtime":1609301146447,"results":"20","hashOfConfig":"12"},{"size":2530,"mtime":1609330034208,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"13jcglp",{"filePath":"24","messages":"25","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/SHU/dev/my_weather/src/components/Footer.tsx",[],"/Users/SHU/dev/my_weather/src/components/Header.tsx",["46","47","48","49"],"import React from 'react';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport Switch from '@material-ui/core/Switch';\nimport { createStyles, makeStyles, Theme } from '@material-ui/core/styles';\n\nimport styles from './Header.module.scss';\nimport { Grid } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      flexGrow: 1,\n    },\n    menuButton: {\n      marginRight: theme.spacing(2),\n    },\n    title: {\n      flexGrow: 1,\n    },\n  })\n);\n\nconst Header: React.FC = () => {\n  const [state, setState] = React.useState({\n    checkedA: false,\n  });\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setState({ ...state, [event.target.name]: event.target.checked });\n  };\n\n  return (\n    <div className={styles.wrapper}>\n      <Grid container className={styles.container}>\n        <Grid item xs={12} sm={4}>\n          <div className={styles.left_section}>\n            <IconButton\n              edge=\"start\"\n              className={styles.menu_button}\n              aria-label=\"menu\"\n            >\n              <MenuIcon className={styles.menu_icon} />\n            </IconButton>\n\n            <svg className={styles.logo_icon} viewBox=\"150.3 22.2 213.7 42.8\">\n              <path\n                fill=\"#00ff9b\"\n                d=\"M150.3 65V22.2L193 65z\"\n                data-name=\"Path 1\"\n              />\n              <path\n                fill=\"#003eff\"\n                d=\"M193.1 65h-42.8L193 22.2z\"\n                data-name=\"Path 2\"\n              />\n              <text\n                className={styles.logo_text}\n                fill=\"#432c85\"\n                font-family=\"SegoeUI-Semibold,Segoe UI\"\n                font-size=\"30\"\n                font-weight=\"600\"\n                letter-spacing=\".1em\"\n                transform=\"translate(237 56)\"\n              >\n                <tspan x=\"0\" y=\"0\">\n                  Minimis\n                </tspan>\n              </text>\n            </svg>\n          </div>\n        </Grid>\n\n        <Grid item xs={12} sm={4} className={styles.middle_section}>\n          <h3 className={styles.date_text}>Today</h3>\n        </Grid>\n\n        <Grid item xs={12} sm={4} className={styles.right_section}>\n          <div className={styles.mode_toggle_container}>\n            <span className={styles.mode_toggle_text}>Light</span>\n            <Switch\n              checked={state.checkedA}\n              onChange={handleChange}\n              name=\"checkedA\"\n              className={styles.toggle_switch}\n              // inputProps={{ 'aria-label': 'secondary checkbox' }}\n            />\n            <span className={styles.mode_toggle_text}>Dark</span>\n          </div>\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default Header;\n","/Users/SHU/dev/my_weather/src/App.tsx",["50","51","52","53","54"],"/Users/SHU/dev/my_weather/src/serviceWorker.ts",["55","56"],"// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","/Users/SHU/dev/my_weather/src/components/Main.tsx",[],"/Users/SHU/dev/my_weather/src/index.tsx",[],[],"/Users/SHU/dev/my_weather/src/features/counter/counterSlice.ts",["57"],"import { createSlice, PayloadAction } from '@reduxjs/toolkit';\r\nimport { AppThunk, RootState } from '../../app/store';\r\n\r\ninterface CounterState {\r\n  value: number;\r\n}\r\n\r\nconst initialState: CounterState = {\r\n  value: 0,\r\n};\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState,\r\n  reducers: {\r\n    increment: state => {\r\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\r\n      // doesn't actually mutate the state because it uses the Immer library,\r\n      // which detects changes to a \"draft state\" and produces a brand new\r\n      // immutable state based off those changes\r\n      state.value += 1;\r\n    },\r\n    decrement: state => {\r\n      state.value -= 1;\r\n    },\r\n    // Use the PayloadAction type to declare the contents of `action.payload`\r\n    incrementByAmount: (state, action: PayloadAction<number>) => {\r\n      state.value += action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\r\n\r\n// The function below is called a thunk and allows us to perform async logic. It\r\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\r\n// will call the thunk with the `dispatch` function as the first argument. Async\r\n// code can then be executed and other actions can be dispatched\r\nexport const incrementAsync = (amount: number): AppThunk => dispatch => {\r\n  setTimeout(() => {\r\n    dispatch(incrementByAmount(amount));\r\n  }, 1000);\r\n};\r\n\r\n// The function below is called a selector and allows us to select a value from\r\n// the state. Selectors can also be defined inline where they're used instead of\r\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\r\nexport const selectCount = (state: RootState) => state.counter.value;\r\n\r\nexport default counterSlice.reducer;\r\n","/Users/SHU/dev/my_weather/src/components/main.components/WeatherCard.tsx",["58"],"/Users/SHU/dev/my_weather/src/components/main.components/AddCard.tsx",["59"],"/Users/SHU/dev/my_weather/src/components/SideMenu.tsx",["60","61","62","63","64","65","66"],{"ruleId":"67","severity":1,"message":"68","line":2,"column":8,"nodeType":"69","messageId":"70","endLine":2,"endColumn":14},{"ruleId":"67","severity":1,"message":"71","line":3,"column":8,"nodeType":"69","messageId":"70","endLine":3,"endColumn":15},{"ruleId":"67","severity":1,"message":"72","line":4,"column":8,"nodeType":"69","messageId":"70","endLine":4,"endColumn":18},{"ruleId":"67","severity":1,"message":"73","line":13,"column":7,"nodeType":"69","messageId":"70","endLine":13,"endColumn":16},{"ruleId":"67","severity":1,"message":"74","line":5,"column":8,"nodeType":"69","messageId":"70","endLine":5,"endColumn":14},{"ruleId":"67","severity":1,"message":"75","line":6,"column":8,"nodeType":"69","messageId":"70","endLine":6,"endColumn":12},{"ruleId":"67","severity":1,"message":"76","line":7,"column":8,"nodeType":"69","messageId":"70","endLine":7,"endColumn":14},{"ruleId":"67","severity":1,"message":"77","line":8,"column":10,"nodeType":"69","messageId":"70","endLine":8,"endColumn":19},{"ruleId":"67","severity":1,"message":"78","line":8,"column":21,"nodeType":"69","messageId":"70","endLine":8,"endColumn":25},{"ruleId":"79","severity":1,"message":"80","line":28,"column":8,"nodeType":"81","messageId":"82","endLine":28,"endColumn":42},{"ruleId":"79","severity":1,"message":"80","line":136,"column":8,"nodeType":"81","messageId":"82","endLine":136,"endColumn":29},{"ruleId":"79","severity":1,"message":"80","line":48,"column":28,"nodeType":"83","messageId":"82","endLine":48,"endColumn":49},{"ruleId":"79","severity":1,"message":"80","line":5,"column":21,"nodeType":"83","messageId":"82","endLine":5,"endColumn":26},{"ruleId":"79","severity":1,"message":"80","line":5,"column":17,"nodeType":"83","messageId":"82","endLine":5,"endColumn":22},{"ruleId":"67","severity":1,"message":"84","line":3,"column":10,"nodeType":"69","messageId":"70","endLine":3,"endColumn":20},{"ruleId":"67","severity":1,"message":"85","line":8,"column":8,"nodeType":"69","messageId":"70","endLine":8,"endColumn":16},{"ruleId":"67","severity":1,"message":"86","line":9,"column":8,"nodeType":"69","messageId":"70","endLine":9,"endColumn":20},{"ruleId":"67","severity":1,"message":"87","line":10,"column":8,"nodeType":"69","messageId":"70","endLine":10,"endColumn":20},{"ruleId":"67","severity":1,"message":"88","line":11,"column":8,"nodeType":"69","messageId":"70","endLine":11,"endColumn":17},{"ruleId":"67","severity":1,"message":"89","line":12,"column":8,"nodeType":"69","messageId":"70","endLine":12,"endColumn":16},{"ruleId":"79","severity":1,"message":"80","line":19,"column":18,"nodeType":"83","messageId":"82","endLine":19,"endColumn":23},"@typescript-eslint/no-unused-vars","'AppBar' is defined but never used.","Identifier","unusedVar","'Toolbar' is defined but never used.","'Typography' is defined but never used.","'useStyles' is assigned a value but never used.","'Header' is defined but never used.","'Main' is defined but never used.","'Footer' is defined but never used.","'Container' is defined but never used.","'Grid' is defined but never used.","@typescript-eslint/explicit-module-boundary-types","Missing return type on function.","FunctionDeclaration","missingReturnType","ArrowFunctionExpression","'makeStyles' is defined but never used.","'ListItem' is defined but never used.","'ListItemIcon' is defined but never used.","'ListItemText' is defined but never used.","'InboxIcon' is defined but never used.","'MailIcon' is defined but never used."]